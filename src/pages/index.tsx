import type { NextPage } from 'next';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import randomMaps from '../helpers/randomMaps';
import { Socket, io } from 'socket.io-client';
import { DefaultEventsMap } from 'socket.io/dist/typed-events';

import MyFleet from '../components/MyFleet';
import EnemyFleet from '../components/EnemyFleet';

const myFleetIndex = Math.floor(Math.random() * 9);

const socket: Socket<DefaultEventsMap, DefaultEventsMap> = io();

const Home: NextPage = () => {
	const [enemyFleet, setEnemyFleet] = useState<number[][]>([]);
	const [myFleet, setMyFleet] = useState<number[][]>(
		randomMaps[myFleetIndex] || []
	);
	const [showGame, setShowGame] = useState(false);
	const [myTurn, setMyTurn] = useState(true);
	const [errorMessage, setErrorMessage] = useState(false);

	useEffect(() => {
		const socketInit = async () => {
			await fetch('/api/socket');
		};
		socketInit();
	}, []);

	socket.on('get-field', (enemyFleetIndex) => {
		setEnemyFleet(JSON.parse(JSON.stringify(randomMaps[enemyFleetIndex]!)));
	});

	socket.on('strike-land', (coordinates) => {
		const { y, x } = coordinates;
		if (myFleet.length > 1) {
			const newMyFleet = [...myFleet];
			if (myFleet[y]![x] === 1) newMyFleet[y]![x] = 2;
			else if (myFleet[y]![x] === 0) newMyFleet[y]![x] = 3;
			setMyFleet(newMyFleet);
			if (!myFleet.flat().find((element) => element === 1)) alert('You Lose');
		}
		setMyTurn(true);
		setErrorMessage(false);
	});

	const handleStart = () => {
		socket.emit('send-field', myFleetIndex);
		setShowGame((prevShow) => !prevShow);
	};

	const handleClick = (y: number, x: number) => {
		if (myTurn) {
			socket.emit('launch-strike', { y, x });
			if (enemyFleet.length > 1) {
				const newEnemyFleet = [...enemyFleet];
				if (enemyFleet[y]![x] === 0) newEnemyFleet[y]![x] = 3;
				else if (enemyFleet[y]![x] === 1) newEnemyFleet[y]![x] = 2;
				setEnemyFleet(newEnemyFleet);
				if (!enemyFleet.flat().find((element) => element === 1))
					alert('You win');
			}
			setMyTurn(false);
		} else setErrorMessage(true);
	};

	return (
		<>
			<Head>
				<title>Battleship</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/battleship-icon.png" />
			</Head>

			<main className="container mx-auto flex min-h-screen flex-col items-center justify-center gap-4">
				{showGame ? (
					<>
						<h1 className="text-2xl uppercase">your fleet</h1>
						<MyFleet myFleet={myFleet} />
						<h1 className="text-2xl uppercase">enemy fleet</h1>
						<EnemyFleet enemyFleet={enemyFleet} handleClick={handleClick} />
						{errorMessage && (
							<div className="border-16 rounded-sm border-red-700 bg-red-200 px-4 py-2">
								<p className="font-sans text-red-600">Not your turn</p>
							</div>
						)}
					</>
				) : (
					<>
						<h1 className="font-saira text-8xl uppercase">battleship</h1>
						<button
							className="rounded-full bg-sky-500 py-4 px-8 text-4xl font-bold uppercase shadow-lg"
							onClick={handleStart}
						>
							start
						</button>
					</>
				)}
			</main>
		</>
	);
};

export default Home;
